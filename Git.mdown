# GitHub y Git desde la terminal

Lo primero que debemos hacer es "vincular" nuestra cuenta de GitHub con nuestro ordenador. Para ello:

`git config --global user.email "tavoibrahim@gmail.com"`

y luego:

`git config user.name "TavoIbrahim"`

## Comándos básicos de Git

Para crear un nuevo repositorio de git, nos movemos al directorio de nuestro interés (e.g., *ABC_example*) y dentro de ese directorio, utilizamos:

`git init`

En pantalla veremos algo así como `Initialized empty Git repository in /home/YOUR_USERNAME/ABC_example/.git/`. Nota que el repositorio hasta ahora, se encuentra vacio. 

Git está organizado en tres partes: el Working directory (WD), el Index y Head.

![alt text](https://github.com/TavoIbrahim/Git/blob/master/trees.png)
Imagen de [Roger Dudler](https://twitter.com/rogerdudler) 

Git dice que nuestro repositorio esta vacio (aunque en realidad tenemos datos dentro del WD) porque tenemos que "empujar" nuestros archivos, desde Working directory hasta Head. Para ello, utilizaremos `git add`, que registra los cambios (archivos, directorios, etc.) a Index y `git commit -m` nos permite realizar comentarios de dichos cambios y llevarlos a Head.  

En nuestro repositorio local viven ABC_scripts y un README.txt. Para llevar estos archivos, del WD a Index, en la terminal escribiremos:

`git add ABC_scripts`

`git add README.txt`

Para verificar que nuestros archivos se encuentren en Index, podemos escribir `git status` y nos aparecerá una lista de los archivos que se encuentran en index y que necesitan ser commiteados para llegar a Head. Ahora, para migrar los archivos de Index a Head, escribiremos:

`git commit -m "add files for an ABC analysis"`, entre comillas va un comentario. Te darás cuenta que el commit fue un éxito cuando te aparezca una lista de los archivos en pantalla.

Ahora ya podemos subir nuestro repositorio local (*ABC_example*), a GitHub. Para hacerlo, en GitHub.com tenemos que crear un repositorio remoto con "point and click". En este caso, mi repositorio en GitHub se llama *ABC_example*.

Finalmente, desde la terminal escribimos:

`git remote add origin https://github.com/TavoIbrahim/ABC_example.git` que crea un vínculo (remote) llamado *origin*, entre tu repositorio local y el repositorio que creamos en GitHub; y 

`git push -u origin master`, que "empuja" los archivos que están en Head a GitHub. 

Es probable que te arrepientas de llevar algo a Head (XD), así que existen algunos comandos para solucionarlo:

`git log` nos permitirá observar el historial de nuestro repositorio local (es decir, los commits). Nos aparecerá un texto similar a éste:

`commit a39041d1fc86cf34b01697ac3b5fa187509dcf6b
Author: Tavo Ibrahim <tavoibrahim@gmail.com>
Date:   Wed Apr 18 14:16:00 2018 -0500

    add files for an ABC analysis
chalis@chalis-SVE14118FXW[ABC_example]`

Si queremos eliminar un commit de manera definitiva, entonces escribimos: `git reset --hard a39041d1fc86cf34b01697ac3b5fa187509dcf6b`,
por lo que tendrás que empezar a "empujar" tus archivos y directorios desde el WD hasta Head.


















`git push origin master` 

"empuja" los cambios a nuestro GitHub. En este paso, es necesario que cuentes con tu usuario y contraseña, por lo que `git push origin master` sólo es útil para subir cambios a NUESTRO GitHub. Para empujar cambios a otros usuarios, se requerirá realizar un **pull request**.







`git clone /home/PATH_to_working_directory` y `git clone https://github.com/TavoIbrahim/BioinfinvRepro.git` crea copias de los repositorios que existen en el escritorio y en el servidor (GitHub) respectivamente. 





## Fork

Hacer un fork implica copiar un repositorio. La idea de un fork es tener un punto de partida para proponer cambios y/o desarrollar nuevas ideas, SIN realizar modificaciones al repositorio original.

Los pasos son relativamente sencillos:

**1)** Hacer el fork del repositorio en GitHub con un simple click

![alt text](https://github.com/TavoIbrahim/Git/blob/master/Captura%20de%20pantalla%20de%202018-04-17%2013-53-45.png)

Aparecerá algo así:

![alt text](https://github.com/TavoIbrahim/Git/blob/master/Captura%20de%20pantalla%20de%202018-04-17%2009-01-31.png)

**2)** Realizas los cambios que vas a proponer

**3)** Pull request, es decir, le propones tus cambios al usuario original

## Hacer cambios Ordenador --> Nuestro GitHub

En este caso, vamos a copiar (descargar) el repositorio BioinfinvRepro que vive en mi [GitHub](https://github.com/TavoIbrahim) a algún lugar del ordenador (En realidad, este repo es un **fork**, el original vive en la cuenta de [Alicia Mastretta](https://github.com/AliciaMstt)). Para ello, hay que escribir:

`git clone https://github.com/TavoIbrahim/BioinfinvRepro.git`

Es necesario que nuestro WD corresponda a BioinfinvRepro, así que:

`cd BioinfinvRepro`

A partir de este momento, los comandos que nos será útiles son: 

`git status`

que nos permitirá comprobar nuestra situación (si hay archivos o cambios que han quedado pendientes subir/commit). Por ejemplo, si nosotros creamos un archivo (e.g., Physalia_physalis.txt) y después escribimos `git status`, veremos que nuestra situación cambió. Para darle seguimiento a este cambio, es necesario utilizar: 

`git add`

que agregará los cambios (archivos, directorios, etc.) a git (i.e., Physalia_physalis.txt); y  

`git commit -m`

que permitirá realizar comentarios de los cambios (e.g., `git commit -m "agregar archivo Physalia"`). Finalmente,  

`git push origin master` 

"empuja" los cambios a nuestro GitHub. En este paso, es necesario que cuentes con tu usuario y contraseña, por lo que `git push origin master` sólo es útil para subir cambios a NUESTRO GitHub. Para empujar cambios a otros usuarios, se requerirá realizar un **pull request**.

## Sincronizar un repositorio con una cuenta GitHub (o crear un remote)

Para sincronizar la copia del repositorio que ya descargamos (el fork de BioinfinvRepro, en mi GitHub) y que vive en nuestro ordenador, con el código guardado en GitHub (el original, del GitHub de Alicia), hay que crear un *remote* o un vínculo. 

Estando dentro del directorio, BioinfinvRepro, escribimos

`git remote -v` 

Esta línea nos sirve para verificar el *origin* del repositorio que descargamos. En este caso el origin debe ser la URL al código que se encuentra forkeado en mi GitHub. 

Para mantener actualizado nuestro código, necesitamos declarar al repositorio *upstream*, es decir, al repositorio target del que vamos a jalar las actualizaciones (el BioinfinvRepro de Alicia que vive en GitHub). Para ello utilizaremos:  

`git remote add upstream https://github.com/AliciaMstt/BioinfinvRepro.git`

posteriormente, para jalar los cambios, escribiremos:

`git fetch upstream` 

este último comando, además de actualizar nuestro repo, mantendrá intactos nuestros cambios en una rama local que se llamará `upstream/master` 

Posteriormente, debemos escribir `git checkout master`, cuya opción `checkout`, nos regresará a la rama master. Es en esta rama donde actualizaremos




